plugins {
    // apply plugin: "application"
    id("java-library")
}

description = "Base-Project for Media-Access"

dependencies {
    api("org.springframework.boot:spring-boot-starter-jdbc") {
        // exclude(group: "ch.qos.logback", module: "logback-classic")
    }
    api("org.xerial:sqlite-jdbc")

    runtimeOnly("org.slf4j:jcl-over-slf4j")
    runtimeOnly("org.slf4j:slf4j-simple")
    runtimeOnly("org.mariadb.jdbc:mariadb-java-client")
}

ext {
    main = "de.freese.mediathek.report.MultimediaReporter"
}

// Start: gradle run
// application {
//     mainClass = project.main
//
//     applicationDefaultJvmArgs = ["-Xms1024m", "-Xmx2048m"]
// }
// run {
//     jvmArgs = ["--enable-native-access=ALL-UNNAMED"]
// }

// distTar {
//     enabled = false
// }

// Done by Convention-Plugin.
// jar {
//     manifest {
//         attributes(
//                 "Main-Class": project.main
//         )
//     }
// }

// Start: gradle runMultimediaReporter
tasks.register("runMultimediaReporter", JavaExec) {
    group = "MyTasks"
    description = "Run the main class with JavaExecTask"

    // executable = ".../java.exe"
    // workingDir = workDir
    // args = ["...","..."]
    jvmArgs("--enable-native-access=ALL-UNNAMED")
    // debugOptions {
    //     enabled = true
    //     port = 5566
    //     server = true
    //     suspend = false
    // }

    // classpath = files(...)
    // classpath = configurations.runtimeClasspath // Doesn't contain Main-Class !
    classpath = sourceSets.main.runtimeClasspath
    mainClass = project.main

    // args("-Dspring.profiles.active=file")
    // environment("spring.profiles.active", "file")
}

// Start: gradle bootRun --args="--spring.profiles.active=file"
// The archive name. If the name has not been explicitly set, the pattern for the name is:
// [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
// archiveFileName = "my-boot.jar"
// springBoot {
//     mainClass = project.main
// }

// gradle bootRun --args="--spring.profiles.active=file --server.port=65111"
// bootRun {
//     args = [
//             "--enable-native-access=ALL-UNNAMED"
//     ]
// }
